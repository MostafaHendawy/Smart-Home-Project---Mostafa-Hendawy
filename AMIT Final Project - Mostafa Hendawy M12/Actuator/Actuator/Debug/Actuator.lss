
Actuator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b5c  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000706  00000000  00000000  00000f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000653  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044b  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008f5  00000000  00000000  0000220f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 16000000UL
#include "util/delay.h"

int main(void)
{
	mdio_pinStatus(PORTB, PIN4, INPUT_FLOAT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	60 e1       	ldi	r22, 0x10	; 16
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN5, INPUT_FLOAT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	60 e2       	ldi	r22, 0x20	; 32
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN6, OUTPUT);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	60 e4       	ldi	r22, 0x40	; 64
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN7, INPUT_FLOAT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e8       	ldi	r22, 0x80	; 128
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>

	mspi_initSlave(MSPI_SAMPLE_R_SETUP_F, MSPI_PRE_32);
  a4:	64 e0       	ldi	r22, 0x04	; 4
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 42 01 	call	0x284	; 0x284 <mspi_initSlave>
	
	mdio_pinStatus(PORTC, PIN0, OUTPUT);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>
	mdio_pinStatus(PORTC, PIN1, OUTPUT);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 9d 00 	call	0x13a	; 0x13a <mdio_pinStatus>
	
	while (1)
	{
		switch(mspi_recieve())
  c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mspi_recieve>
  c4:	83 36       	cpi	r24, 0x63	; 99
  c6:	b9 f0       	breq	.+46     	; 0xf6 <main+0x7a>
  c8:	28 f4       	brcc	.+10     	; 0xd4 <main+0x58>
  ca:	81 36       	cpi	r24, 0x61	; 97
  cc:	41 f0       	breq	.+16     	; 0xde <main+0x62>
  ce:	82 36       	cpi	r24, 0x62	; 98
  d0:	61 f0       	breq	.+24     	; 0xea <main+0x6e>
  d2:	28 c0       	rjmp	.+80     	; 0x124 <main+0xa8>
  d4:	84 36       	cpi	r24, 0x64	; 100
  d6:	a9 f0       	breq	.+42     	; 0x102 <main+0x86>
  d8:	85 36       	cpi	r24, 0x65	; 101
  da:	c9 f0       	breq	.+50     	; 0x10e <main+0x92>
  dc:	23 c0       	rjmp	.+70     	; 0x124 <main+0xa8>
		{
			case 'a':
			
				mdio_setPinValue(PORTC, PIN0, HIGH);
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;
  e8:	eb cf       	rjmp	.-42     	; 0xc0 <main+0x44>
				
			case 'b':
			
				mdio_setPinValue(PORTC, PIN0, LOW);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;
  f4:	e5 cf       	rjmp	.-54     	; 0xc0 <main+0x44>
				
			case 'c':
			
				mdio_setPinValue(PORTC, PIN1, HIGH);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;
 100:	df cf       	rjmp	.-66     	; 0xc0 <main+0x44>
				
			case 'd':
			
				mdio_setPinValue(PORTC, PIN1, LOW);
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;
 10c:	d9 cf       	rjmp	.-78     	; 0xc0 <main+0x44>
				
			case 'e':
			
				mdio_setPinValue(PORTC, PIN0, HIGH);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				mdio_setPinValue(PORTC, PIN1, HIGH);
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;
 122:	ce cf       	rjmp	.-100    	; 0xc0 <main+0x44>
				
			default:
				
				mdio_setPinValue(PORTC, PIN0, LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				mdio_setPinValue(PORTC, PIN1, LOW);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	62 e0       	ldi	r22, 0x02	; 2
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 06 01 	call	0x20c	; 0x20c <mdio_setPinValue>
				break;	
 138:	c3 cf       	rjmp	.-122    	; 0xc0 <main+0x44>

0000013a <mdio_pinStatus>:
/************************************************************************/

/*This function is responsible for setting a pin or pins state wether input or output  for a dedicated port*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	switch(port)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	f9 f0       	breq	.+62     	; 0x17c <mdio_pinStatus+0x42>
 13e:	30 f0       	brcs	.+12     	; 0x14c <mdio_pinStatus+0x12>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	a1 f1       	breq	.+104    	; 0x1ac <mdio_pinStatus+0x72>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f4       	brne	.+2      	; 0x14a <mdio_pinStatus+0x10>
 148:	49 c0       	rjmp	.+146    	; 0x1dc <mdio_pinStatus+0xa2>
 14a:	08 95       	ret
	{	
		case PORTA:
			switch(pin_status)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	41 f0       	breq	.+16     	; 0x160 <mdio_pinStatus+0x26>
 150:	18 f0       	brcs	.+6      	; 0x158 <mdio_pinStatus+0x1e>
 152:	42 30       	cpi	r20, 0x02	; 2
 154:	51 f0       	breq	.+20     	; 0x16a <mdio_pinStatus+0x30>
 156:	08 95       	ret
			{	/*Setting the pins as outputs */
				case OUTPUT:
					
					MDIO_DDRA |= pin;
 158:	8a b3       	in	r24, 0x1a	; 26
 15a:	68 2b       	or	r22, r24
 15c:	6a bb       	out	0x1a, r22	; 26
					break;
 15e:	08 95       	ret
					/*Setting the pins as inputs without pull up */
				case  INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	60 95       	com	r22
 164:	68 23       	and	r22, r24
 166:	6a bb       	out	0x1a, r22	; 26
					break;	
 168:	08 95       	ret
					/*Setting the pins as inputs with pull up */
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
 16a:	8a b3       	in	r24, 0x1a	; 26
 16c:	96 2f       	mov	r25, r22
 16e:	90 95       	com	r25
 170:	89 23       	and	r24, r25
 172:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
 174:	8b b3       	in	r24, 0x1b	; 27
 176:	68 2b       	or	r22, r24
 178:	6b bb       	out	0x1b, r22	; 27
					break;	
 17a:	08 95       	ret
			}
			break;
		case PORTB:
		switch(pin_status)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	41 f0       	breq	.+16     	; 0x190 <mdio_pinStatus+0x56>
 180:	18 f0       	brcs	.+6      	; 0x188 <mdio_pinStatus+0x4e>
 182:	42 30       	cpi	r20, 0x02	; 2
 184:	51 f0       	breq	.+20     	; 0x19a <mdio_pinStatus+0x60>
 186:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRB |= pin;
 188:	87 b3       	in	r24, 0x17	; 23
 18a:	68 2b       	or	r22, r24
 18c:	67 bb       	out	0x17, r22	; 23
				break;
 18e:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRB &= ~pin;
 190:	87 b3       	in	r24, 0x17	; 23
 192:	60 95       	com	r22
 194:	68 23       	and	r22, r24
 196:	67 bb       	out	0x17, r22	; 23
				break;
 198:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRB &= ~pin;
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	96 2f       	mov	r25, r22
 19e:	90 95       	com	r25
 1a0:	89 23       	and	r24, r25
 1a2:	87 bb       	out	0x17, r24	; 23
				MDIO_PORTB |= pin;
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	68 2b       	or	r22, r24
 1a8:	68 bb       	out	0x18, r22	; 24
				break;
 1aa:	08 95       	ret
		}
		break;
		case PORTC:
		switch(pin_status)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	41 f0       	breq	.+16     	; 0x1c0 <mdio_pinStatus+0x86>
 1b0:	18 f0       	brcs	.+6      	; 0x1b8 <mdio_pinStatus+0x7e>
 1b2:	42 30       	cpi	r20, 0x02	; 2
 1b4:	51 f0       	breq	.+20     	; 0x1ca <mdio_pinStatus+0x90>
 1b6:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRC |= pin;
 1b8:	84 b3       	in	r24, 0x14	; 20
 1ba:	68 2b       	or	r22, r24
 1bc:	64 bb       	out	0x14, r22	; 20
				break;
 1be:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRC &= ~pin;
 1c0:	84 b3       	in	r24, 0x14	; 20
 1c2:	60 95       	com	r22
 1c4:	68 23       	and	r22, r24
 1c6:	64 bb       	out	0x14, r22	; 20
				break;
 1c8:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRC &= ~pin;
 1ca:	84 b3       	in	r24, 0x14	; 20
 1cc:	96 2f       	mov	r25, r22
 1ce:	90 95       	com	r25
 1d0:	89 23       	and	r24, r25
 1d2:	84 bb       	out	0x14, r24	; 20
				MDIO_PORTC |= pin;
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	68 2b       	or	r22, r24
 1d8:	65 bb       	out	0x15, r22	; 21
				break;
 1da:	08 95       	ret
		}
		break;		
		case PORTD:
		switch(pin_status)
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	41 f0       	breq	.+16     	; 0x1f0 <mdio_pinStatus+0xb6>
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <mdio_pinStatus+0xae>
 1e2:	42 30       	cpi	r20, 0x02	; 2
 1e4:	51 f0       	breq	.+20     	; 0x1fa <mdio_pinStatus+0xc0>
 1e6:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRD |= pin;
 1e8:	81 b3       	in	r24, 0x11	; 17
 1ea:	68 2b       	or	r22, r24
 1ec:	61 bb       	out	0x11, r22	; 17
				break;
 1ee:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRD &= ~pin;
 1f0:	81 b3       	in	r24, 0x11	; 17
 1f2:	60 95       	com	r22
 1f4:	68 23       	and	r22, r24
 1f6:	61 bb       	out	0x11, r22	; 17
				break;
 1f8:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRD &= ~pin;
 1fa:	81 b3       	in	r24, 0x11	; 17
 1fc:	96 2f       	mov	r25, r22
 1fe:	90 95       	com	r25
 200:	89 23       	and	r24, r25
 202:	81 bb       	out	0x11, r24	; 17
				MDIO_PORTD |= pin;
 204:	82 b3       	in	r24, 0x12	; 18
 206:	68 2b       	or	r22, r24
 208:	62 bb       	out	0x12, r22	; 18
 20a:	08 95       	ret

0000020c <mdio_setPinValue>:
}

/*This function is responsible for setting a dedicated value for a pin or pins*/
void mdio_setPinValue(u8_t port,u8_t pin,u8_t pin_value)
{
	switch(port)
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	99 f0       	breq	.+38     	; 0x236 <mdio_setPinValue+0x2a>
 210:	28 f0       	brcs	.+10     	; 0x21c <mdio_setPinValue+0x10>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	e9 f0       	breq	.+58     	; 0x250 <mdio_setPinValue+0x44>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	41 f1       	breq	.+80     	; 0x26a <mdio_setPinValue+0x5e>
 21a:	08 95       	ret
	{  
		case PORTA:
		switch(pin_value)
 21c:	44 23       	and	r20, r20
 21e:	31 f0       	breq	.+12     	; 0x22c <mdio_setPinValue+0x20>
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	79 f5       	brne	.+94     	; 0x282 <mdio_setPinValue+0x76>
		{	
			case HIGH:
			
				MDIO_PORTA |= pin;
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	68 2b       	or	r22, r24
 228:	6b bb       	out	0x1b, r22	; 27
				break;
 22a:	08 95       	ret
			case  LOW:
				MDIO_PORTA &= ~pin;
 22c:	8b b3       	in	r24, 0x1b	; 27
 22e:	60 95       	com	r22
 230:	68 23       	and	r22, r24
 232:	6b bb       	out	0x1b, r22	; 27
				break;
 234:	08 95       	ret
		}
		break;
		
		
		case PORTB:
		switch(pin_value)
 236:	44 23       	and	r20, r20
 238:	31 f0       	breq	.+12     	; 0x246 <mdio_setPinValue+0x3a>
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	11 f5       	brne	.+68     	; 0x282 <mdio_setPinValue+0x76>
		{
			case HIGH:
			
				MDIO_PORTB |= pin;
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	68 2b       	or	r22, r24
 242:	68 bb       	out	0x18, r22	; 24
				break;
 244:	08 95       	ret
			case  LOW:
				MDIO_PORTB &= ~pin;
 246:	88 b3       	in	r24, 0x18	; 24
 248:	60 95       	com	r22
 24a:	68 23       	and	r22, r24
 24c:	68 bb       	out	0x18, r22	; 24
				break;
 24e:	08 95       	ret
		}
			break;
			
			
		case PORTC:
		switch(pin_value)
 250:	44 23       	and	r20, r20
 252:	31 f0       	breq	.+12     	; 0x260 <mdio_setPinValue+0x54>
 254:	41 30       	cpi	r20, 0x01	; 1
 256:	a9 f4       	brne	.+42     	; 0x282 <mdio_setPinValue+0x76>
		{
			case HIGH:
			
				MDIO_PORTC |= pin;
 258:	85 b3       	in	r24, 0x15	; 21
 25a:	68 2b       	or	r22, r24
 25c:	65 bb       	out	0x15, r22	; 21
				break;
 25e:	08 95       	ret
			case  LOW:
				MDIO_PORTC &= ~pin;
 260:	85 b3       	in	r24, 0x15	; 21
 262:	60 95       	com	r22
 264:	68 23       	and	r22, r24
 266:	65 bb       	out	0x15, r22	; 21
				break;
 268:	08 95       	ret
		}
			break;
			
			
		case PORTD:
		switch(pin_value)
 26a:	44 23       	and	r20, r20
 26c:	31 f0       	breq	.+12     	; 0x27a <mdio_setPinValue+0x6e>
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	41 f4       	brne	.+16     	; 0x282 <mdio_setPinValue+0x76>
		{
			case HIGH:
			
				MDIO_PORTD |= pin;
 272:	82 b3       	in	r24, 0x12	; 18
 274:	68 2b       	or	r22, r24
 276:	62 bb       	out	0x12, r22	; 18
				break;
 278:	08 95       	ret
			case  LOW:
				MDIO_PORTD &= ~pin;
 27a:	82 b3       	in	r24, 0x12	; 18
 27c:	60 95       	com	r22
 27e:	68 23       	and	r22, r24
 280:	62 bb       	out	0x12, r22	; 18
 282:	08 95       	ret

00000284 <mspi_initSlave>:
		mspi_sendRecvByte(data[looping_var]);
	}
	
	/*Return from this function*/
	return;	
}
 284:	24 e0       	ldi	r18, 0x04	; 4
 286:	82 9f       	mul	r24, r18
 288:	c0 01       	movw	r24, r0
 28a:	11 24       	eor	r1, r1
 28c:	80 61       	ori	r24, 0x10	; 16
 28e:	8d b9       	out	0x0d, r24	; 13
 290:	6c 98       	cbi	0x0d, 4	; 13
 292:	60 ff       	sbrs	r22, 0
 294:	70 9a       	sbi	0x0e, 0	; 14
 296:	8d b1       	in	r24, 0x0d	; 13
 298:	66 95       	lsr	r22
 29a:	68 2b       	or	r22, r24
 29c:	6d b9       	out	0x0d, r22	; 13
 29e:	08 95       	ret

000002a0 <mspi_recieve>:

u8_t mspi_recieve()
{
	SET_BIT(MSPI_SPCR,6);
 2a0:	6e 9a       	sbi	0x0d, 6	; 13
	u16_t timeout = 0;
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeout < 10000)
 2a2:	77 99       	sbic	0x0e, 7	; 14
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <mspi_recieve+0x1a>
 2a6:	80 e1       	ldi	r24, 0x10	; 16
 2a8:	97 e2       	ldi	r25, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	25 e0       	ldi	r18, 0x05	; 5
 2ac:	2a 95       	dec	r18
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <mspi_recieve+0xc>
 2b0:	00 00       	nop
 2b2:	77 99       	sbic	0x0e, 7	; 14
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <mspi_recieve+0x1a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	c1 f7       	brne	.-16     	; 0x2aa <mspi_recieve+0xa>
		timeout++;
		_delay_us(1);

	}

	CLEAR_BIT(MSPI_SPCR, 6);
 2ba:	6e 98       	cbi	0x0d, 6	; 13

	return MSPI_SPDR;
 2bc:	8f b1       	in	r24, 0x0f	; 15

 2be:	08 95       	ret

000002c0 <_exit>:
 2c0:	f8 94       	cli

000002c2 <__stop_program>:
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <__stop_program>
