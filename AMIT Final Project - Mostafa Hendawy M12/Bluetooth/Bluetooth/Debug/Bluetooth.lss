
Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bea  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000815  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000786  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a4  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009bd  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

#define F_CPU 16000000UL
#include "util/delay.h"

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	u8_t recieve = 0;
  86:	19 82       	std	Y+1, r1	; 0x01
	mdio_pinStatus(PORTB, PIN4, OUTPUT);
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	60 e1       	ldi	r22, 0x10	; 16
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	0e 94 68 00 	call	0xd0	; 0xd0 <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN5, OUTPUT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e2       	ldi	r22, 0x20	; 32
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 68 00 	call	0xd0	; 0xd0 <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN6, INPUT_FLOAT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	60 e4       	ldi	r22, 0x40	; 64
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 68 00 	call	0xd0	; 0xd0 <mdio_pinStatus>
	mdio_pinStatus(PORTB, PIN7, OUTPUT);
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	60 e8       	ldi	r22, 0x80	; 128
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 68 00 	call	0xd0	; 0xd0 <mdio_pinStatus>

	mspi_init(MSPI_SAMPLE_R_SETUP_F, MSPI_PRE_32);	
  b0:	64 e0       	ldi	r22, 0x04	; 4
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mspi_init>
	muart_init(MUART_9600_BPS);
  b8:	87 e6       	ldi	r24, 0x67	; 103
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ef 00 	call	0x1de	; 0x1de <muart_init>
	
	while (1)
	{
		
		muart_recvByte(&recieve);
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <muart_recvByte>
		mspi_sendRecvByte(recieve);
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <mspi_sendRecvByte>
  ce:	f8 cf       	rjmp	.-16     	; 0xc0 <main+0x44>

000000d0 <mdio_pinStatus>:
/************************************************************************/

/*This function is responsible for setting a pin or pins state wether input or output  for a dedicated port*/
void mdio_pinStatus(u8_t port,u8_t pin,u8_t pin_status)
{
	switch(port)
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	f9 f0       	breq	.+62     	; 0x112 <mdio_pinStatus+0x42>
  d4:	30 f0       	brcs	.+12     	; 0xe2 <mdio_pinStatus+0x12>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	a1 f1       	breq	.+104    	; 0x142 <mdio_pinStatus+0x72>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	09 f4       	brne	.+2      	; 0xe0 <mdio_pinStatus+0x10>
  de:	49 c0       	rjmp	.+146    	; 0x172 <mdio_pinStatus+0xa2>
  e0:	08 95       	ret
	{	
		case PORTA:
			switch(pin_status)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	41 f0       	breq	.+16     	; 0xf6 <mdio_pinStatus+0x26>
  e6:	18 f0       	brcs	.+6      	; 0xee <mdio_pinStatus+0x1e>
  e8:	42 30       	cpi	r20, 0x02	; 2
  ea:	51 f0       	breq	.+20     	; 0x100 <mdio_pinStatus+0x30>
  ec:	08 95       	ret
			{	/*Setting the pins as outputs */
				case OUTPUT:
					
					MDIO_DDRA |= pin;
  ee:	8a b3       	in	r24, 0x1a	; 26
  f0:	68 2b       	or	r22, r24
  f2:	6a bb       	out	0x1a, r22	; 26
					break;
  f4:	08 95       	ret
					/*Setting the pins as inputs without pull up */
				case  INPUT_FLOAT:
					MDIO_DDRA &= ~pin;
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	60 95       	com	r22
  fa:	68 23       	and	r22, r24
  fc:	6a bb       	out	0x1a, r22	; 26
					break;	
  fe:	08 95       	ret
					/*Setting the pins as inputs with pull up */
				case INPUT_PULLUP:
					MDIO_DDRA &= ~pin;
 100:	8a b3       	in	r24, 0x1a	; 26
 102:	96 2f       	mov	r25, r22
 104:	90 95       	com	r25
 106:	89 23       	and	r24, r25
 108:	8a bb       	out	0x1a, r24	; 26
					MDIO_PORTA |= pin;
 10a:	8b b3       	in	r24, 0x1b	; 27
 10c:	68 2b       	or	r22, r24
 10e:	6b bb       	out	0x1b, r22	; 27
					break;	
 110:	08 95       	ret
			}
			break;
		case PORTB:
		switch(pin_status)
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	41 f0       	breq	.+16     	; 0x126 <mdio_pinStatus+0x56>
 116:	18 f0       	brcs	.+6      	; 0x11e <mdio_pinStatus+0x4e>
 118:	42 30       	cpi	r20, 0x02	; 2
 11a:	51 f0       	breq	.+20     	; 0x130 <mdio_pinStatus+0x60>
 11c:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRB |= pin;
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	68 2b       	or	r22, r24
 122:	67 bb       	out	0x17, r22	; 23
				break;
 124:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRB &= ~pin;
 126:	87 b3       	in	r24, 0x17	; 23
 128:	60 95       	com	r22
 12a:	68 23       	and	r22, r24
 12c:	67 bb       	out	0x17, r22	; 23
				break;
 12e:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRB &= ~pin;
 130:	87 b3       	in	r24, 0x17	; 23
 132:	96 2f       	mov	r25, r22
 134:	90 95       	com	r25
 136:	89 23       	and	r24, r25
 138:	87 bb       	out	0x17, r24	; 23
				MDIO_PORTB |= pin;
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	68 2b       	or	r22, r24
 13e:	68 bb       	out	0x18, r22	; 24
				break;
 140:	08 95       	ret
		}
		break;
		case PORTC:
		switch(pin_status)
 142:	41 30       	cpi	r20, 0x01	; 1
 144:	41 f0       	breq	.+16     	; 0x156 <mdio_pinStatus+0x86>
 146:	18 f0       	brcs	.+6      	; 0x14e <mdio_pinStatus+0x7e>
 148:	42 30       	cpi	r20, 0x02	; 2
 14a:	51 f0       	breq	.+20     	; 0x160 <mdio_pinStatus+0x90>
 14c:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRC |= pin;
 14e:	84 b3       	in	r24, 0x14	; 20
 150:	68 2b       	or	r22, r24
 152:	64 bb       	out	0x14, r22	; 20
				break;
 154:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRC &= ~pin;
 156:	84 b3       	in	r24, 0x14	; 20
 158:	60 95       	com	r22
 15a:	68 23       	and	r22, r24
 15c:	64 bb       	out	0x14, r22	; 20
				break;
 15e:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRC &= ~pin;
 160:	84 b3       	in	r24, 0x14	; 20
 162:	96 2f       	mov	r25, r22
 164:	90 95       	com	r25
 166:	89 23       	and	r24, r25
 168:	84 bb       	out	0x14, r24	; 20
				MDIO_PORTC |= pin;
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	68 2b       	or	r22, r24
 16e:	65 bb       	out	0x15, r22	; 21
				break;
 170:	08 95       	ret
		}
		break;		
		case PORTD:
		switch(pin_status)
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	41 f0       	breq	.+16     	; 0x186 <mdio_pinStatus+0xb6>
 176:	18 f0       	brcs	.+6      	; 0x17e <mdio_pinStatus+0xae>
 178:	42 30       	cpi	r20, 0x02	; 2
 17a:	51 f0       	breq	.+20     	; 0x190 <mdio_pinStatus+0xc0>
 17c:	08 95       	ret
		{
			case OUTPUT:
			
				MDIO_DDRD |= pin;
 17e:	81 b3       	in	r24, 0x11	; 17
 180:	68 2b       	or	r22, r24
 182:	61 bb       	out	0x11, r22	; 17
				break;
 184:	08 95       	ret
			case  INPUT_FLOAT:
				MDIO_DDRD &= ~pin;
 186:	81 b3       	in	r24, 0x11	; 17
 188:	60 95       	com	r22
 18a:	68 23       	and	r22, r24
 18c:	61 bb       	out	0x11, r22	; 17
				break;
 18e:	08 95       	ret
			case INPUT_PULLUP:
				MDIO_DDRD &= ~pin;
 190:	81 b3       	in	r24, 0x11	; 17
 192:	96 2f       	mov	r25, r22
 194:	90 95       	com	r25
 196:	89 23       	and	r24, r25
 198:	81 bb       	out	0x11, r24	; 17
				MDIO_PORTD |= pin;
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	68 2b       	or	r22, r24
 19e:	62 bb       	out	0x12, r22	; 18
 1a0:	08 95       	ret

000001a2 <mspi_init>:
/************************************************************************/

void mspi_init(u8_t data_mode, u8_t clk_prescaler)
{
	/*Enable master mode, Sending MSB first and Setting data mode*/
	MSPI_SPCR = (0x10) | (data_mode << 2);
 1a2:	24 e0       	ldi	r18, 0x04	; 4
 1a4:	82 9f       	mul	r24, r18
 1a6:	c0 01       	movw	r24, r0
 1a8:	11 24       	eor	r1, r1
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	8d b9       	out	0x0d, r24	; 13
	
	/*Check if the prescaler value is divisable by two or not*/
	if( (clk_prescaler % 2) == 0)
 1ae:	60 ff       	sbrs	r22, 0
	{
		/*Enable SPI double speed*/
		SET_BIT(MSPI_SPSR, 0);				
 1b0:	70 9a       	sbi	0x0e, 0	; 14
	{
		/*Do nothing*/
	}
	
	/*Set SPI clock*/
	MSPI_SPCR |= (clk_prescaler / 2);
 1b2:	8d b1       	in	r24, 0x0d	; 13
 1b4:	66 95       	lsr	r22
 1b6:	68 2b       	or	r22, r24
 1b8:	6d b9       	out	0x0d, r22	; 13
 1ba:	08 95       	ret

000001bc <mspi_sendRecvByte>:
{
	/*Variable used in timing out operations*/
	u16_t timeout_var = 0;
	
	/*Enable SPI peripheral*/
	SET_BIT(MSPI_SPCR, 6);
 1bc:	6e 9a       	sbi	0x0d, 6	; 13
	
	/*Send master data*/
	MSPI_SPDR = data;
 1be:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until data is transmitted or timeout in 10ms*/
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeout_var < 10000)
 1c0:	77 99       	sbic	0x0e, 7	; 14
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <mspi_sendRecvByte+0x1c>
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	97 e2       	ldi	r25, 0x27	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c8:	25 e0       	ldi	r18, 0x05	; 5
 1ca:	2a 95       	dec	r18
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <mspi_sendRecvByte+0xe>
 1ce:	00 00       	nop
 1d0:	77 99       	sbic	0x0e, 7	; 14
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <mspi_sendRecvByte+0x1c>
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	c1 f7       	brne	.-16     	; 0x1c8 <mspi_sendRecvByte+0xc>
		/*Delay for 1us*/
		_delay_us(1);
	}
	
	/*Disable SPI peripheral*/
	CLEAR_BIT(MSPI_SPCR, 6);
 1d8:	6e 98       	cbi	0x0d, 6	; 13
	
	/*Return SPI slave data*/
	return MSPI_SPDR;
 1da:	8f b1       	in	r24, 0x0f	; 15
}
 1dc:	08 95       	ret

000001de <muart_init>:
			/*Delay for 1ms*/
			_delay_ms(1);
		}
		
		/*Clearing Tx flag*/
		SET_BIT(MUART_UCSRA, 6);		
 1de:	54 9a       	sbi	0x0a, 4	; 10
 1e0:	53 9a       	sbi	0x0a, 3	; 10
 1e2:	26 e8       	ldi	r18, 0x86	; 134
 1e4:	20 bd       	out	0x20, r18	; 32
 1e6:	89 b9       	out	0x09, r24	; 9
 1e8:	90 bd       	out	0x20, r25	; 32
 1ea:	08 95       	ret

000001ec <muart_recvByte>:
}

void muart_recvByte(u8_t* data)
{
	/*Checking that there's a new data or not*/
	if(GET_BIT(MUART_UCSRA, 7))
 1ec:	5f 9b       	sbis	0x0b, 7	; 11
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <muart_recvByte+0xa>
	{
		/*Reading the new data*/
		*data = MUART_UDR;
 1f0:	2c b1       	in	r18, 0x0c	; 12
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
 1f6:	08 95       	ret

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
